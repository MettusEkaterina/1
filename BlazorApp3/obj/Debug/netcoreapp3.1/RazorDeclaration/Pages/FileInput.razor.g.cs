#pragma checksum "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\Pages\FileInput.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "06477519ee9bed1a0b3dac64155713d7f142e8cb"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorApp3.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\_Imports.razor"
using BlazorApp3;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\_Imports.razor"
using BlazorApp3.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\Pages\FileInput.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\Pages\FileInput.razor"
using BlazorApp3.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\Pages\FileInput.razor"
using DataJuggler.Blazor.FileUpload;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/fileInput")]
    public partial class FileInput : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 64 "C:\Users\mettu\source\repos\BlazorApp3\BlazorApp3\Pages\FileInput.razor"
 
    string ChosenAction { get; set; }
    string KeyWord { get; set; }
    string CurrentInputFilePath { get; set; }
    string InputFileName { get; set; }
    string LastAction;
    string ResultFileExtension { get; set; }
    string uploadStatus;
    string downloadStatus;
    string error;
    bool isFileUploaded;

    private void ReadFile(UploadedFileInfo uploadedFileInfo)
    {
        if (uploadedFileInfo.Aborted)
        {
            uploadStatus = uploadedFileInfo.ErrorMessage;
            isFileUploaded = false;
            inputService.DeleteFile(CurrentInputFilePath);
        }
        else
        {
            try
            {
                inputService.DeleteFile(CurrentInputFilePath);
                CurrentInputFilePath = uploadedFileInfo.NameWithPartialGuid;
                InputFileName = uploadedFileInfo.Name;
                LastAction = "";
                error = null;
                uploadStatus = "Файл " + InputFileName + " успешно загружен";
                isFileUploaded = true;
            }
            catch (Exception e)
            {
                error = e.Message;
                isFileUploaded = false;
                uploadStatus = null;
            }
            finally
            {
                this.StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        KeyWord = @"скорпион";
        ChosenAction = @"1";
        ResultFileExtension = @"1";
        isFileUploaded = false;
    }

    public async void DownloadFile()
    {
        try
        {
            if (!isFileUploaded)
            {
                error = "Файл для обработки не загружен";
            }
            else
            {
                bool encrypting;

                if (ChosenAction.Equals("1"))
                {
                    encrypting = false;
                    LastAction = "_decrypted";
                }
                else
                {
                    encrypting = true;
                    LastAction = "_encrypted";
                }

                if (ResultFileExtension.Equals("1"))
                {
                    string InputText = await inputService.GetInputExampleAsync(CurrentInputFilePath);
                    string ResultText = await vigenereService.GetResultTextAsync(InputText, KeyWord, encrypting);
                    error = null;
                    var bytes = System.Text.Encoding.UTF8.GetBytes(ResultText);
                    await js.SaveAs(Path.GetFileNameWithoutExtension(InputFileName) + LastAction + ".txt", bytes);
                    downloadStatus = "Результат сохранен";
                }
                else
                {
                    if (Path.GetExtension(InputFileName).Equals(".txt"))
                    {
                        string InputText = await inputService.GetInputExampleAsync(CurrentInputFilePath);
                        string ResultText = await vigenereService.GetResultTextAsync(InputText, KeyWord, encrypting);
                        error = null;
                        using (MemoryStream documentStream = service.CreateWord(ResultText))
                        {
                            await js.SaveAs(Path.GetFileNameWithoutExtension(InputFileName) + LastAction + ".docx", documentStream.ToArray());
                            downloadStatus = "Результат сохранен";
                        }
                    }
                    else
                    {
                        using (MemoryStream documentStream = service.CreateWord($"wwwroot\\Upload\\{CurrentInputFilePath}", KeyWord, encrypting))
                        {
                            await js.SaveAs(Path.GetFileNameWithoutExtension(InputFileName) + LastAction + ".docx", documentStream.ToArray());
                            downloadStatus = "Результат сохранен";
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            error = e.Message;
            downloadStatus = null;
        }
        finally
        {
            this.StateHasChanged();
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WordService service { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private InputService inputService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private VigenereCipherService vigenereService { get; set; }
    }
}
#pragma warning restore 1591
